# marketml/configs/configs.py
from pathlib import Path
import pandas as pd

# PROJECT_ROOT is the .ndmh/ directory
PROJECT_ROOT = Path(__file__).resolve().parents[2]

# --- MarketML Application Root Directory ---
MARKETML_APP_ROOT = PROJECT_ROOT / "marketml"

# --- Input Data Paths ---
INPUT_DATA_DIR = MARKETML_APP_ROOT / "data_input"
RAW_GLOBAL_PRICE_FILE = INPUT_DATA_DIR / "yahoo_price_data_fixed.csv"
RAW_GLOBAL_FINANCIAL_FILE = INPUT_DATA_DIR / "financial_data.csv"
FINANCIAL_DATA_FILE_PATH = INPUT_DATA_DIR / "financial_data.csv"

# --- Processed Data Paths ---
PROCESSED_DATA_DIR = MARKETML_APP_ROOT / "data_processed"
ENRICHED_DATA_FILE = PROCESSED_DATA_DIR / "price_data_enriched_v2.csv"
PRICE_DATA_FOR_PORTFOLIO_PATH = ENRICHED_DATA_FILE
ENRICHED_DATA_FOR_FORECAST = ENRICHED_DATA_FILE

# --- Output Directories ---
RESULTS_OUTPUT_DIR = MARKETML_APP_ROOT / "results_output"
FORECASTS_OUTPUT_DIR = MARKETML_APP_ROOT / "forecasts_output"
LOG_OUTPUT_DIR = PROJECT_ROOT / "logs"
PLOTS_OUTPUT_DIR = RESULTS_OUTPUT_DIR / "plots"

# --- Output File Names ---
CLASSIFICATION_PROBS_FILE = RESULTS_OUTPUT_DIR / "classification_probabilities.csv"
CLASSIFICATION_PROBS_FILE_PATH = CLASSIFICATION_PROBS_FILE

MODEL_PERF_SUMMARY_FILE = RESULTS_OUTPUT_DIR / "model_performance_summary.csv"
MODEL_PERF_DETAILED_FILE = RESULTS_OUTPUT_DIR / "model_performance_detailed.csv"

MARKOWITZ_PERF_DAILY_FILE_NAME = "markowitz_performance_daily.csv"
BLACKLITTERMAN_PERF_DAILY_FILE_NAME = "blacklitterman_performance_daily.csv"
PORTFOLIO_STRATEGIES_SUMMARY_FILE_NAME = "portfolio_strategies_summary.csv"

MARKOWITZ_PERF_DAILY_FILE = RESULTS_OUTPUT_DIR / MARKOWITZ_PERF_DAILY_FILE_NAME
BLACKLITTERMAN_PERF_DAILY_FILE = RESULTS_OUTPUT_DIR / BLACKLITTERMAN_PERF_DAILY_FILE_NAME

# --- Reinforcement Learning Model Paths ---
RL_MODEL_DIR = RESULTS_OUTPUT_DIR / "rl_models"
RL_ALGORITHM = "PPO"
RL_MODEL_NAME = f"{RL_ALGORITHM.lower()}_portfolio_agent.zip"
RL_MODEL_SAVE_PATH = RL_MODEL_DIR / RL_MODEL_NAME
RL_LOG_DIR_FOR_SB3 = RL_MODEL_DIR / "sb3_logs"
RL_TRAINING_LOG_DIR = RL_MODEL_DIR / "training_logs"

# --- Model Performance Analysis ---
ANALYSIS_METRICS_SUFFIXES = [
    "_Accuracy", "_F1_Macro", "_F1_Weighted", "_Precision_Macro", "_Recall_Macro"
]
ANALYSIS_MODEL_NAMES = ["ARIMA", "RandomForest", "XGBoost", "LSTM", "Transformer", "SVM"]
ANALYSIS_FORECASTING_MODEL_ORDER = ["ARIMA", "Prophet", "SVM", "RandomForest", "XGBoost", "LSTM", "Transformer"]
ANALYSIS_STRATEGY_ORDER = ["Markowitz", "BlackLitterman", "RL (PPO)", "Benchmark"]

# --- Portfolio Performance Analysis ---
PORTFOLIO_KEY_METRICS_PLOT = ['Sharpe Ratio', 'Sortino Ratio', 'Calmar Ratio', 'Max Drawdown', 'Annualized Return', 'Annualized Volatility']
PORTFOLIO_ROLLING_SHARPE_WINDOWS = [30, 60, 90]

# --- DATA PARAMETERS ---
TIME_RANGE_START = "2020-01-01"
TIME_RANGE_END = "2024-12-31"

# --- FEATURE ENGINEERING PARAMETERS ---
GARCH_WINDOW = 252
GARCH_FORECAST_HORIZON = 1
RSI_WINDOW = 14
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9
BB_WINDOW = 20
SMA_WINDOW = 20
EMA_WINDOW = 20
ROLLING_STAT_WINDOWS = [5, 10]
PRICE_ZSCORE_WINDOW = 20
LAG_PERIODS = [1, 3, 5]
TREND_THRESHOLD = 0.002
INITIAL_TRAIN_YEARS = 1
TEST_YEARS = 1
STEP_YEARS = 1
USE_EXPANDING_WINDOW = True
INITIAL_TRAIN_TIMEDELTA = pd.Timedelta(days=365 * INITIAL_TRAIN_YEARS)
TEST_TIMEDELTA = pd.Timedelta(days=365 * TEST_YEARS)
STEP_TIMEDELTA = pd.Timedelta(days=365 * STEP_YEARS)
TARGET_COL_PCT = 'target_pct_change'
TARGET_COL_TREND = 'target_trend'
N_ITER_SEARCH_SKLEARN = 30
CV_FOLDS_TUNING_SKLEARN = 3
N_TIMESTEPS_SEQUENCE = 10
KERAS_EPOCHS = 50
KERAS_BATCH_SIZE = 64
KERAS_VALIDATION_SPLIT = 0.1
KERAS_EARLY_STOPPING_PATIENCE = 10
KERAS_REDUCE_LR_PATIENCE = 5
KERAS_REDUCE_LR_FACTOR = 0.2
KERAS_MIN_LR = 1e-6
LSTM_UNITS = 128
LSTM_DROPOUT_RATE = 0.25
LSTM_LEARNING_RATE = 5e-5
TRANSFORMER_NUM_BLOCKS = 2
TRANSFORMER_HEAD_SIZE = 128
TRANSFORMER_NUM_HEADS = 4
TRANSFORMER_FF_DIM = 128
TRANSFORMER_DROPOUT_RATE = 0.35
TRANSFORMER_LEARNING_RATE = 5e-5
TRANSFORMER_WEIGHT_DECAY = 1e-4
BASE_FEATURE_COLS = [
    'RSI', 'MACD', 'MACD_Signal', 'MACD_Hist', 'BB_Upper', 'BB_Lower', 'EMA_20',
    'volume', 'garch_vol_forecast', 'OBV',
    'close_roll_mean_5', 'close_roll_std_5',
    'close_roll_mean_10', 'close_roll_std_10',
    'RSI_roll_mean_5', 'RSI_roll_std_5',
    'RSI_roll_mean_10', 'RSI_roll_std_10',
    'close_zscore_20'
]

# --- FORECAST_FUTURE.PY PARAMETERS ---
FORECAST_YEAR_TARGET = 2025
FORECAST_TRAINING_YEARS = 3
FORECAST_TREND_THRESHOLD = TREND_THRESHOLD
APPROX_TRADING_DAYS_PER_YEAR = 252

# --- GENERAL PROJECT SETTINGS ---
RANDOM_SEED = 42

# --- PORTFOLIO OPTIMIZATION PARAMETERS ---
PORTFOLIO_ASSETS = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'F', 'JNJ', 'JPM', 'V', 'PG', 'UNH', 'XOM', 'NFLX']
PORTFOLIO_START_DATE = "2023-01-01"
PORTFOLIO_END_DATE = "2023-12-31"
REBALANCE_FREQUENCY = 'BM'

ROLLING_WINDOW_COVARIANCE = 60
ROLLING_WINDOW_RETURNS = 20

MARKOWITZ_OBJECTIVE = 'max_sharpe'
MARKOWITZ_RISK_FREE_RATE = 0.02
MARKOWITZ_WEIGHT_BOUNDS = (0.01, 0.3)

BL_TAU = 0.025
BL_RISK_AVERSION = 2.5
BL_PROB_THRESHOLD_STRONG_VIEW = 0.65
BL_VIEW_CONFIDENCE_STRONG = 0.8
BL_EXPECTED_OUTPERFORMANCE_STRONG = 0.05

INITIAL_CAPITAL = 100000
TRANSACTION_COST_BPS = 5

SOFT_SIGNAL_MODEL_NAME = 'XGBoost'
SOFT_SIGNAL_TRAIN_END_DATE = "2022-12-31"
SOFT_SIGNAL_PREDICT_START_DATE = PORTFOLIO_START_DATE
SOFT_SIGNAL_PREDICT_END_DATE = PORTFOLIO_END_DATE

# --- Reinforcement Learning Portfolio Optimization ---
RL_STRATEGY_ENABLED = True
RL_TRAIN_DATA_START_DATE = "2020-01-01"
RL_TRAIN_DATA_END_DATE = SOFT_SIGNAL_TRAIN_END_DATE

RL_LOOKBACK_WINDOW_SIZE = 30
RL_REBALANCE_FREQUENCY_DAYS = 5
RL_TRANSACTION_COST_BPS = 10
RL_FINANCIAL_FEATURES = ['ROA', 'ROE', 'EPS', 'P/E Ratio', 'Debt/Equity', 'Dividend Yield']
RL_PROB_FEATURES = [f'prob_increase_{SOFT_SIGNAL_MODEL_NAME}']

# --- RL Reward Configuration ---
RL_REWARD_USE_LOG_RETURN = True
RL_REWARD_TURNOVER_PENALTY_FACTOR = 0.001

# --- RL Algorithm and Training Configuration ---
RL_TOTAL_TIMESTEPS = 500000

# --- PPO Hyperparameters ---
RL_PPO_N_STEPS = 2048
RL_PPO_BATCH_SIZE = 64
RL_PPO_N_EPOCHS = 10
RL_PPO_GAMMA = 0.99
RL_PPO_GAE_LAMBDA = 0.95
RL_PPO_CLIP_RANGE = 0.2
RL_PPO_ENT_COEF = 0.0
RL_PPO_VF_COEF = 0.5
RL_PPO_MAX_GRAD_NORM = 0.5
RL_PPO_LEARNING_RATE = 0.0003

RL_PPO_POLICY_KWARGS = dict(net_arch=dict(pi=[64, 64], vf=[64, 64]))

# --- Plotting Specific Configurations ---
PLOTS_OUTPUT_DIR_PLOTLY = PLOTS_OUTPUT_DIR
FORECASTING_BASELINE_SCORES = {
    # "RMSE": 0.5,
    # "MAE": 0.3,
    # "R2 Score": 0.6
}
MARKET_EVENTS_FOR_PLOTS = [
    # {"name": "COVID-19 Crash", "start_date": "2020-02-20", "end_date": "2020-03-23", "color": "rgba(255,0,0,0.1)", "line_color": "red"},
    # {"name": "Event X", "start_date": "2021-06-15", "line_dash": "dot", "annotation_position": "top right"}
]

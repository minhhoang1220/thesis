# demo_app/pages/2_Portfolio_Optimization.py
import sys
from pathlib import Path

# Add sys.path for project root
project_root = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(project_root))

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import ast
from demo_app.utils import (
    load_portfolio_daily_performance, 
    load_portfolio_summary, 
    get_plot_path,
    STRATEGY_NAMES_MAPPING
)

st.set_page_config(layout="wide")
st.title("ðŸ’¼ Investment Strategy Analysis")

# --- Load Data ---
perf_data = load_portfolio_daily_performance()
summary_data = load_portfolio_summary()

if not perf_data:
    st.error("Portfolio performance data not found. Please run the `run_backtests` pipeline.")
    st.stop()

# --- Get Available Strategies ---
available_technical_names = [name for name in perf_data.keys() if name in summary_data.index]

if not available_technical_names:
    st.error("No strategies have sufficient data to display. Please check the pipeline results.")
    st.stop()
    
available_display_names = [STRATEGY_NAMES_MAPPING.get(name, name) for name in available_technical_names]

# --- Sidebar Options ---
st.sidebar.header("Strategy Options")
selected_display_names = st.sidebar.multiselect(
    "Select strategies to compare",
    available_display_names,
    default=available_display_names
)

if not selected_display_names:
    st.warning("Please select at least one strategy.")
    st.stop()

selected_technical_names = [tech_name for tech_name, disp_name in STRATEGY_NAMES_MAPPING.items() if disp_name in selected_display_names]

# --- Performance Overview ---
st.header("Performance Overview")
col1, col2 = st.columns([0.6, 0.4])

with col1:
    st.subheader("Performance Metrics Table")
    summary_to_display = summary_data.rename(index=STRATEGY_NAMES_MAPPING)
    st.dataframe(summary_to_display.loc[selected_display_names].round(4), use_container_width=True)

with col2:
    st.subheader("Asset Allocation (Last Day)")
    last_day_display_name = st.selectbox("Select strategy to view allocation", selected_display_names)
    last_day_technical_name = next((k for k, v in STRATEGY_NAMES_MAPPING.items() if v == last_day_display_name), None)

    if last_day_technical_name and last_day_technical_name in perf_data:
        last_valid_entry = perf_data[last_day_technical_name].dropna(subset=['weights']).iloc[-1]
        last_weights_str = last_valid_entry['weights']
        try:
            last_weights = ast.literal_eval(last_weights_str)
            if isinstance(last_weights, dict) and last_weights:
                weights_df = pd.DataFrame(list(last_weights.items()), columns=['Ticker', 'Weight']).sort_values('Weight', ascending=False)
                fig_pie = go.Figure(data=[go.Pie(labels=weights_df['Ticker'], values=weights_df['Weight'], hole=.3, textinfo='percent+label')])
                fig_pie.update_layout(title_text=f"Allocation of {last_day_display_name}", height=350, margin=dict(t=50, b=0, l=0, r=0))
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("No assets held in the portfolio on the last day.")
        except (ValueError, SyntaxError):
            st.error("Unable to parse asset allocation format.")
            
# --- Visualization Tabs ---
st.header("Detailed Visualizations")
tab1, tab2, tab3 = st.tabs(["ðŸ“ˆ Capital Growth", "ðŸ“‰ Drawdown", "ðŸ“Š Other Charts"])

with tab1:
    fig_value = go.Figure()
    for tech_name in selected_technical_names:
        df = perf_data[tech_name]
        display_name = STRATEGY_NAMES_MAPPING.get(tech_name, tech_name)
        fig_value.add_trace(go.Scatter(x=df.index, y=df['value'], mode='lines', name=display_name))
    fig_value.update_layout(title="Capital Growth Performance", xaxis_title="Date", yaxis_title="Portfolio Value (USD)", height=500, legend_title="Strategy")
    st.plotly_chart(fig_value, use_container_width=True)
    
with tab2:
    fig_drawdown = go.Figure()
    for tech_name in selected_technical_names:
        df = perf_data[tech_name]
        display_name = STRATEGY_NAMES_MAPPING.get(tech_name, tech_name)
        cumulative_returns = (1 + df['returns']).cumprod()
        peak = cumulative_returns.expanding(min_periods=1).max()
        drawdown = (cumulative_returns / peak - 1) * 100
        fig_drawdown.add_trace(go.Scatter(x=drawdown.index, y=drawdown, mode='lines', name=display_name, fill='tozeroy'))
    fig_drawdown.update_layout(title="Maximum Drawdown", xaxis_title="Date", yaxis_title="Drawdown (%)", height=500, legend_title="Strategy")
    st.plotly_chart(fig_drawdown, use_container_width=True)

with tab3:
    st.subheader("Charts Generated by Pipeline")
    st.info(f"Images are read from the `marketml/results_output/performance_plots/` directory.")
    
    plot_files = {
        "Daily Returns Distribution": "daily_returns_distribution_plotly.png",
        "Key Metrics Comparison": "key_metrics_comparison_plotly.png",
        "Return & Volatility": "return_vs_volatility_plotly.png",
    }
    
    for title, filename in plot_files.items():
        plot_path = get_plot_path(filename)
        if plot_path:
            with st.expander(f"View: {title}", expanded=False):
                st.image(str(plot_path), use_container_width=True)
        else:
            with st.expander(f"View: {title} (not available)", expanded=False):
                st.warning(f"File '{filename}' does not exist. Please run the pipeline to generate it.")
